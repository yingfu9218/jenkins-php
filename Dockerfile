FROM jenkins/jenkins:2.167
# if we want to install via apt
USER root

# 时区设置
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone

######

# php安装
RUN apt-get update && apt-get install -y php  curl php-curl php-pear  php-xdebug  php-gd php-mbstring  php-mcrypt php-xml php-mysql php-bcmath php-dev php-zip  ant rsync vim

# php安装 mongodb 扩展
RUN wget http://pecl.php.net/get/mongodb-1.5.2.tgz && tar -zxvf mongodb-1.5.2.tgz
RUN cd mongodb-1.5.2 && /usr/bin/phpize && ./configure --with-php-config=/usr/bin/php-config && make && make install
RUN cd ../
RUN rm -f  mongodb-1.5.2.tgz && rm -rf  mongodb-1.5.2
RUN echo "extension=mongodb.so" >> /etc/php/7.0/cli/conf.d/mongodb.ini

# php安装 redis 扩展
RUN wget http://pecl.php.net/get/redis-5.3.4.tgz && tar -zxvf redis-5.3.4.tgz 
RUN cd redis-5.3.4 &&  /usr/bin/phpize  &&  ./configure --with-php-config=/usr/bin/php-config  && make && make install && ls -l
RUN echo "extension=redis.so" >> /etc/php/7.0/cli/conf.d/redis.ini
RUN  rm -rf redis-5.3.4 && rm  -f redis-5.3.4.tgz

######

# PHP7.2安装
RUN set -eux; \
  { \
    echo 'Package: php*'; \
    echo 'Pin: release *'; \
    echo 'Pin-Priority: -1'; \
  } > /etc/apt/preferences.d/no-debian-php

# dependencies required for running "phpize"
# (see persistent deps below)
ENV PHPIZE_DEPS \
    autoconf \
    dpkg-dev \
    file \
    g++ \
    gcc \
    libc-dev \
    make \
    pkg-config \
    re2c
# persistent / runtime deps
RUN apt-get update;
RUN apt-get install -y apt-utils
RUN set -eux; \
  apt-get update; \
  apt-get install -y --no-install-recommends \
    $PHPIZE_DEPS \
    ca-certificates \
    curl \
    xz-utils \
  ; \
  rm -rf /var/lib/apt/lists/*
#
RUN mkdir  /usr/local/php7.2
ENV PHP_INI_DIR /usr/local/php7.2/etc
RUN set -eux; \
  mkdir -p "$PHP_INI_DIR/conf.d"; 

##<autogenerated>##
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# https://github.com/docker-library/php/issues/272
# -D_LARGEFILE_SOURCE and -D_FILE_OFFSET_BITS=64 (https://www.php.net/manual/en/intro.filesystem.php)
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -pie"
ENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F
ENV PHP_VERSION 7.2.32
ENV PHP_URL="https://www.php.net/distributions/php-7.2.32.tar.xz" PHP_ASC_URL="https://www.php.net/distributions/php-7.2.32.tar.xz.asc"
ENV PHP_SHA256="050fc16ca56d8d2365d980998220a4eb06439da71dfd38de49b42fea72310ef1" PHP_MD5=""
RUN set -eux; \
  \
  savedAptMark="$(apt-mark showmanual)"; \
  apt-get update; \
  apt-get install -y --no-install-recommends gnupg dirmngr; \
  rm -rf /var/lib/apt/lists/*; \
  \
  mkdir -p /usr/src; \
  cd /usr/src; \
  \
  curl -fsSL -o php.tar.xz "$PHP_URL"; \
  \
  apt-mark auto '.*' > /dev/null; \
  apt-mark manual $savedAptMark > /dev/null; \
  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
COPY docker-php-source /usr/local/bin/
RUN  chmod +x /usr/local/bin/docker-php-source

RUN set -eux; \
  \
  savedAptMark="$(apt-mark showmanual)"; \
##<argon2-stretch>##
  sed -e 's/stretch/buster/g' /etc/apt/sources.list > /etc/apt/sources.list.d/buster.list; \
  { \
    echo 'Package: *'; \
    echo 'Pin: release n=buster*'; \
    echo 'Pin-Priority: -10'; \
    echo; \
    echo 'Package: libargon2*'; \
    echo 'Pin: release n=buster*'; \
    echo 'Pin-Priority: 990'; \
  } > /etc/apt/preferences.d/argon2-buster; \
##</argon2-stretch>##
  apt-get update; \
  apt-get install -y --no-install-recommends \
    libargon2-dev \
    libcurl4-openssl-dev \
    libedit-dev \
    libsodium-dev \
    libsqlite3-dev \
    libssl-dev \
    libxml2-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    ${PHP_EXTRA_BUILD_DEPS:-} \
  ; \
  rm -rf /var/lib/apt/lists/*; \
  \
  export \
    CFLAGS="$PHP_CFLAGS" \
    CPPFLAGS="$PHP_CPPFLAGS" \
    LDFLAGS="$PHP_LDFLAGS" \
  ; \
  docker-php-source extract; \
  cd /usr/src/php; \
  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
  debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; \
# https://bugs.php.net/bug.php?id=74125
  if [ ! -d /usr/include/curl ]; then \
    ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; \
  fi; \
  ./configure \
    --build="$gnuArch" \
    --prefix=/usr/local/php7.2 \
    --with-config-file-path="$PHP_INI_DIR" \
    --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
    \
# make sure invalid --configure-flags are fatal errors instead of just warnings
    --enable-option-checking=fatal \
    \
# https://github.com/docker-library/php/issues/439
    --with-mhash \
    \
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
    --enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
    --enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
    --enable-mysqlnd \
# https://wiki.php.net/rfc/argon2_password_hash (7.2+)
    --with-password-argon2 \
# https://wiki.php.net/rfc/libsodium
    --with-sodium=shared \
# always build against system sqlite3 (https://github.com/php/php-src/commit/6083a387a81dbbd66d6316a3a12a63f06d5f7109)
    --with-pdo-sqlite=/usr \
    --with-sqlite3=/usr \
    \
    --with-curl \
    --with-libedit \
    --with-openssl \
    --with-zlib \
    --with-gd \
    --enable-bcmath \
    \
# bundled pcre does not support JIT on s390x
# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
    $(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
    --with-libdir="lib/$debMultiarch" \
    \
    ${PHP_EXTRA_CONFIGURE_ARGS:-} \
  ; \
  make -j "$(nproc)"; \
  find -type f -name '*.a' -delete; \
  make install; \
  find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \
  make clean; \
  \
# https://github.com/docker-library/php/issues/692 (copy default example "php.ini" files somewhere easily discoverable)
  cp -v php.ini-* "$PHP_INI_DIR/"; \  
  \
  cd /; \
  docker-php-source delete; \
  \
# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
  apt-mark auto '.*' > /dev/null; \
  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
  find /usr/local -type f -executable -exec ldd '{}' ';' \
    | awk '/=>/ { print $(NF-1) }' \
    | sort -u \
    | xargs -r dpkg-query --search \
    | cut -d: -f1 \
    | sort -u \
    | xargs -r apt-mark manual \
  ; \
  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
  \
# update pecl channel definitions https://github.com/docker-library/php/issues/443
  pecl update-channels; \
  rm -rf /tmp/pear ~/.pearrc; 
# smoke test
RUN ln -s  /usr/local/php7.2/bin/php /usr/bin/php72
RUN  php72 --version

# 系统安装cmake扩展
RUN wget https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Linux-x86_64.tar.gz && tar xf cmake-3.18.2-Linux-x86_64.tar.gz && mv cmake-3.18.2-Linux-x86_64 /usr/local/
ENV PATH /usr/local/cmake-3.18.2-Linux-x86_64/bin:$PATH
RUN cmake --version
RUN rm -rf cmake-3.18.2-Linux-x86_64 && rm -f cmake-3.18.2-Linux-x86_64.tar.gz

# PHP7.2安装 zip 扩展
RUN  apt-get update
RUn  apt-get -y install libzip-dev
RUN wget http://pecl.php.net/get/zip-1.19.0.tgz && tar -zxvf zip-1.19.0.tgz 
RUN cd zip-1.19.0 && /usr/local/php7.2/bin/phpize  &&  ./configure --with-php-config=/usr/local/php7.2/bin/php-config  && make && make install && ls -l
RUN echo "extension=zip.so" > /usr/local/php7.2/etc/php.ini
RUN cat /usr/local/php7.2/etc/php.ini
RUN  rm -rf zip-1.19.0 && rm  -f zip-1.19.0.tgz 

# PHP7.2安装 redis 扩展
RUN wget http://pecl.php.net/get/redis-5.3.4.tgz && tar -zxvf redis-5.3.4.tgz 
RUN cd redis-5.3.4 && /usr/local/php7.2/bin/phpize  &&  ./configure --with-php-config=/usr/local/php7.2/bin/php-config  && make && make install && ls -l
RUN echo "extension=redis.so" >> /usr/local/php7.2/etc/php.ini
RUN cat /usr/local/php7.2/etc/php.ini
RUN  rm -rf redis-5.3.4 && rm  -f redis-5.3.4.tgz

# PHP7.2安装 mongodb 扩展
RUN wget http://pecl.php.net/get/mongodb-1.5.2.tgz && tar -zxvf mongodb-1.5.2.tgz
RUN cd mongodb-1.5.2 && /usr/local/php7.2/bin/phpize   && ./configure --with-php-config=/usr/local/php7.2/bin/php-config && make && make install
RUN cd ../
RUN rm -f  mongodb-1.5.2.tgz && rm -rf  mongodb-1.5.2
RUN echo "extension=mongodb.so" >> /usr/local/php7.2/etc/php.ini

RUN php72 -m


######


# 安装 node v10.13.0  默认
RUN wget https://nodejs.org/dist/v10.13.0/node-v10.13.0-linux-x64.tar.xz && \
xz -d node-v10.13.0-linux-x64.tar.xz && \
tar -xvf node-v10.13.0-linux-x64.tar && \
rm -f node-v10.13.0-linux-x64.tar.xz  && \
mv node-v10.13.0-linux-x64 /usr/local/node
# 添加环境变量
ENV PATH /usr/local/node/bin:$PATH
# 补充node全局库
RUN npm install -g cnpm --registry=http://registry.npm.taobao.org
RUN npm install -g @vue/cli


# 安装 node v14.16.0
RUN wget https://nodejs.org/dist/v14.16.0/node-v14.16.0-linux-x64.tar.xz && \
xz -d node-v14.16.0-linux-x64.tar.xz && \
tar -xvf node-v14.16.0-linux-x64.tar && \
rm -f node-v14.16.0-linux-x64.tar.xz  && \
mv node-v14.16.0-linux-x64 /usr/local/node14
# 补充node14全局库
RUN /usr/local/node14/bin/npm install -g cnpm --registry=http://registry.npm.taobao.org
RUN /usr/local/node14/bin/npm install -g @vue/cli


######


# 安装puppeteer依赖环境
RUN apt-get update && \
    apt-get -y install xvfb gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 \
      libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 \
      libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 \
      libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 \
      libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget && \
    rm -rf /var/lib/apt/lists/*

# 添加用户组
RUN  groupadd -r pptruser \
&&  usermod -a -G audio jenkins \
&& usermod -a -G video jenkins \
&& usermod -a -G pptruser jenkins \
&& mkdir -p /home/pptruser/Downloads \
&& chown -R jenkins:jenkins /home/pptruser
# 添加jenkins所有者权限
RUN mkdir /home/jenkins
RUN chown jenkins:jenkins /home/jenkins
USER jenkins

# 安装 composer, yes we can't install it in $JENKINS_HOME :(
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/home/jenkins
RUN ls -lh /home/jenkins/

# Install required php tools.
#RUN /home/jenkins/composer.phar --working-dir="/home/jenkins" -n require phing/phing:2.* notfloran/phing-composer-security-checker:~1.0 \
#    phploc/phploc:* phpunit/phpunit:~4.0 pdepend/pdepend:~2.0 phpmd/phpmd:~2.2 sebastian/phpcpd:* \
#   squizlabs/php_codesniffer:* mayflower/php-codebrowser:~1.1 codeception/codeception:*
#RUN echo "export PATH=$PATH:/home/jenkins/.composer/vendor/bin" >> /var/jenkins_home/.bashrc 

#设置中国composer源
RUN /home/jenkins/composer.phar config -g repo.packagist composer https://packagist.phpcomposer.com

